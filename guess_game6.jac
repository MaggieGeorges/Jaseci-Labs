"""A Number Guessing Game
The final version integrates AI capabilities using byLLM (Meaning Typed LLM). 
Instead of simple "too high" or "too low" responses, the game now provides intelligent, context-aware hints generated by an LLM. 
This demonstrates how easily AI can be woven into Jac applications to create more engaging user experiences.
"""

import random;
import from byllm.llm { Model }

# glob llm = Model(model_name="gpt-4o",verbose=False);
 glob llm = Model(model_name="gemini/gemini-2.0-flash", verbose=False);

"""Provide a fun hint if guess is incorrect"""
def give_hint(guess: int, correct_number: int) -> str by llm();

walker GuessGame {
    has guess: int;

    can start with `root entry {
        # Implementation for starting the game
        report "Welcome to the Number Guessing Game!";
        report "Try to guess the number between 1 and 10.";
    }
    can process_guess with turn entry {
        if (this.guess == turn.correct_number) {
            report "Congratulations! You guessed the correct number!";
        } else {
            let hint = give_hint(this.guess, turn.correct_number);
            report f"Incorrect. Hint: {hint}";
        }
    }
}

node turn {
    has correct_number: int = random.randint(1, 10);
}

# Will run when in CLI mode (not in cloud)
 with entry:__main__ {
    root spawn GuessGame(3);
    root spawn GuessGame(4);
    root spawn GuessGame(5);
    root spawn GuessGame(6);
}